import requests
import json
import configparser
import telebot
from extensions import APIException, CurrencyConverter

config = configparser.ConfigParser()
config.read('config.ini')

bot = telebot.TeleBot(config['TELEGRAM']['6271710361:AAFZ075k9_yl-7oIk3hf8D28xjmN5W5hnGE
'])

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "Привет! Я бот, который может вернуть цену на определенное количество валюты. Чтобы узнать список доступных валют, отправьте команду /values. Чтобы узнать цену, введите сообщение в формате: <имя валюты цену которой вы хотите узнать> <имя валюты в которой надо узнать цену первой валюты> <количество первой валюты>.")

@bot.message_handler(commands=['values'])
def send_values(message):
    bot.reply_to(message, "Доступные валюты: USD, EUR, RUB.")

@bot.message_handler(content_types=['text'])
def send_price(message):
    try:
        base, quote, amount = message.text.split(' ')
        result = CurrencyConverter.get_price(base.upper(), quote.upper(), float(amount))
        bot.reply_to(message, f"{amount} {base.upper()} = {result} {quote.upper()}")
    except APIException as e:
        bot.reply_to(message, f"Ошибка: {e}")
    except Exception as e:
        bot.reply_to(message, f"Что-то пошло не так... {e}")

class CurrencyConverter:
    @staticmethod
    def get_price(base: str, quote: str, amount: float) -> float:
        if base == quote:
            return amount
        
        api_key = config['API']['ACCESS_KEY']
        url = f"https://api.exchangeratesapi.io/latest?access_key={api_key}&base={base}&symbols={quote}"
        response = requests.get(url)

        if response.status_code != 200:
            raise APIException(f"Ошибка при получении курса: {response.status_code}")

        response_json = json.loads(response.text)

        if quote not in response_json['rates']:
            raise APIException(f"Курс {quote} не найден в списке доступных валют")

        return round(amount * response_json['rates'][quote], 2)

if __name__ == '__main__':
    bot.polling(none_stop=True)


